Who is the target for this design, e.g., are you assuming any knowledge on the
part of the language users?

English speakers. CS experience will benefit them, since ideas of conditionals
and recursion and function calls are emulated, but the ideas are so simplified
and limited in scope that little to no cs experience should be required.

Why did you choose this design, i.e., why did you think it would be a good idea
for users to express the maze-searching computation using this syntax?

It simplifies things for the user. See RightHand.bot for how to solve the maze.
The states are auto-generated and abstracted. Now the user can write down directly 
in English the algorithm they would have to sweat over creating in picobot language.
And the cardinal directions are abtstracted out as well. Instead the picobot keeps
track of what direction it is facing.

What behaviors are easier to express in your design than in Picobot’s original
design?  If there are no such behaviors, why not?

 * Moving in a direction until a certain state is simplified to a one liner.
 * Keeping track of your orientation is abstracted out and made easy.
 * Breaking the problem down into parts is made easy by human readable labeled sections
 and the necessary states to make a block of an algorithm happen are autogenerated.

What behaviors are more difficult to express in your design than in Picobot’s
original design? If there are no such behaviors, why not?

Making code that uses very few lines of picobot code
(essentially doesn't help get extra credit in CS5).

On a scale of 1–10 (where 10 is “very different”), how different is your syntax
from PicoBot’s original design?

**10**

Is there anything you don’t like about your design?

It doesn't do a good job of teaching state machines, but that is not our
goal anymore with this DSL.
